name: dream-forge

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: dfs
      POSTGRES_PASSWORD: dfs
      POSTGRES_DB: dreamforge
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dfs"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  minio:
    image: quay.io/minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

  minio-create-bucket:
    image: quay.io/minio/mc:latest
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    entrypoint: ["/bin/sh", "-c"]
    command: >-
      "mc alias set local http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD && \
       mc mb --ignore-existing local/dreamforge && \
       mc anonymous set none local/dreamforge || true"

  migrate-db:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    environment:
      DF_DB_URL: postgresql+psycopg://dfs:dfs@postgres:5432/dreamforge
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["uv", "run", "alembic", "upgrade", "head"]
    restart: "no"

  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    environment:
      PYTHONPATH: /app
      DF_DB_URL: postgresql+psycopg://dfs:dfs@postgres:5432/dreamforge
      DF_REDIS_URL: redis://redis:6379/0
      DF_MINIO_ENDPOINT: http://minio:9000
      DF_S3_PUBLIC_ENDPOINT: http://127.0.0.1:9000
      DF_MINIO_ACCESS_KEY: minioadmin
      DF_MINIO_SECRET_KEY: minioadmin
      DF_MINIO_BUCKET: dreamforge
      DF_READY_CHECKS: db,s3
      DF_MODELS_ROOT: /models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-create-bucket:
        condition: service_completed_successfully
      migrate-db:
        condition: service_completed_successfully
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
    volumes:
      - ${DF_HOST_CACHE:-${HOME}/.cache/dream-forge}:/models:ro
    

  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    command: ["celery", "-A", "services.worker.celery_app.app", "worker", "-l", "info", "-P", "solo", "-c", "1"]
    environment:
      PYTHONPATH: /app
      DF_DB_URL: postgresql+psycopg://dfs:dfs@postgres:5432/dreamforge
      DF_REDIS_URL: redis://redis:6379/0
      DF_MINIO_ENDPOINT: http://minio:9000
      DF_MINIO_ACCESS_KEY: minioadmin
      DF_MINIO_SECRET_KEY: minioadmin
      DF_MINIO_BUCKET: dreamforge
      DF_WORKER_METRICS_PORT: 9009
      DF_WORKER_CONCURRENCY: 1
      DF_MODELS_ROOT: /models
      HF_HOME: /models/hf-cache
      # HF access for gated FLUX base
      HUGGINGFACE_HUB_TOKEN: ${HF_TOKEN:-}
      # FLUX base + SRPO config
      DF_FLUX_BASE_REPO: black-forest-labs/FLUX.1-dev
      DF_FLUX_BASE_REV: main
      # Optional: default engine can be set to sdxl (default) or flux-srpo
      # DF_DEFAULT_ENGINE: sdxl
      # If SRPO transformer is pre-installed at a known path, set it explicitly; otherwise engine will search defaults under DF_MODELS_ROOT
      # DF_FLUX_SRPO_TRANSFORMER_PATH: /models/flux-transformer/flux.1-dev-SRPO@bf16/flux.1-dev-SRPO-bf16.safetensors
      DF_UPSCALE_RE_WEIGHTS_DIR: /models/realesrgan-weights
      # Generation tuning defaults (safe for 1024x1024 on 12GB GPUs)
      DF_ENABLE_XFORMERS: "0"
      DF_ATTENTION_SLICING: "0"
      DF_VAE_SLICING: "1"
      DF_VAE_TILING: "1"
      DF_SDP_BACKEND: "auto"
      DF_CUDA_MEM_FRAC: "0.95"
      DF_MODEL_CPU_OFFLOAD: "1"
      DF_SEQUENTIAL_CPU_OFFLOAD: "0"
      DF_USE_SDXL_VAE_FP16_FIX: "1"
      DF_VAE_PRECISION: "fp16"
    deploy:
      resources:
        reservations:
          devices:
            - driver: cdi
              device_ids: ["nvidia.com/gpu=all"]
              capabilities: ["gpu"]
    
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9009/metrics"]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate-db:
        condition: service_completed_successfully
    ports:
      - "9010:9009"
    volumes:
      - ${DF_HOST_CACHE:-${HOME}/.cache/dream-forge}:/models:rw

volumes:
  pgdata:
  minio-data:
